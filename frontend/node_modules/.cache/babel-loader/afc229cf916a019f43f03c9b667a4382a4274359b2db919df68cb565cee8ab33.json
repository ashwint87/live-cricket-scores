{"ast":null,"code":"var _jsxFileName = \"/Users/diya-ashwinr/Downloads/cricket-website/frontend/src/components/SeriesSquad.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './SeriesSquad.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeriesSquad = () => {\n  _s();\n  const seriesId = window.location.pathname.split('/')[2]; // get series ID from URL\n  const [squads, setSquads] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (!seriesId) return;\n    const fetchSquads = async () => {\n      try {\n        const res = await fetch(`/api/series/${seriesId}/squads`);\n        const json = await res.json();\n        const grouped = groupByTeam(json.data || []);\n        setSquads(grouped);\n      } catch (err) {\n        console.error('Error loading series squads', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSquads();\n  }, [seriesId]);\n  console.log(sqauds);\n  const groupByTeam = players => {\n    const map = {};\n    for (const p of players) {\n      if (!map[p.team]) map[p.team] = [];\n      map[p.team].push(p);\n    }\n    return Object.entries(map).map(([team, players]) => ({\n      team,\n      players\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"series-squad\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83E\\uDDE2 Squads\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading squads...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : squads.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No squad data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : squads.map(({\n      team,\n      players\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"squad-team\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: team\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: players.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [player.name, player.role ? ` â€“ ${player.role}` : '']\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, team, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SeriesSquad, \"ZUiJFgFrVajNMZpgPjSlRaqb+vA=\");\n_c = SeriesSquad;\nexport default SeriesSquad;\nvar _c;\n$RefreshReg$(_c, \"SeriesSquad\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","SeriesSquad","_s","seriesId","window","location","pathname","split","squads","setSquads","loading","setLoading","fetchSquads","res","fetch","json","grouped","groupByTeam","data","err","console","error","log","sqauds","players","map","p","team","push","Object","entries","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","player","name","role","id","_c","$RefreshReg$"],"sources":["/Users/diya-ashwinr/Downloads/cricket-website/frontend/src/components/SeriesSquad.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './SeriesSquad.css';\n\nconst SeriesSquad = () => {\n  const seriesId = window.location.pathname.split('/')[2]; // get series ID from URL\n  const [squads, setSquads] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!seriesId) return;\n\n    const fetchSquads = async () => {\n      try {\n        const res = await fetch(`/api/series/${seriesId}/squads`);\n        const json = await res.json();\n        const grouped = groupByTeam(json.data || []);\n        setSquads(grouped);\n      } catch (err) {\n        console.error('Error loading series squads', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSquads();\n  }, [seriesId]);\nconsole.log(sqauds);\n  const groupByTeam = (players) => {\n    const map = {};\n    for (const p of players) {\n      if (!map[p.team]) map[p.team] = [];\n      map[p.team].push(p);\n    }\n    return Object.entries(map).map(([team, players]) => ({ team, players }));\n  };\n\n  return (\n    <div className=\"series-squad\">\n      <h3>ðŸ§¢ Squads</h3>\n      {loading ? (\n        <p>Loading squads...</p>\n      ) : squads.length === 0 ? (\n        <p>No squad data available.</p>\n      ) : (\n        squads.map(({ team, players }) => (\n          <div key={team} className=\"squad-team\">\n            <h4>{team}</h4>\n            <ul>\n              {players.map((player) => (\n                <li key={player.id}>\n                  {player.name}\n                  {player.role ? ` â€“ ${player.role}` : ''}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default SeriesSquad;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}