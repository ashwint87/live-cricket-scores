{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin.r1/Downloads/sportmonks-api-cricket-website/frontend/src/components/series/SeriesMatchesTab.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { FORMAT_CODES } from './../../constants/matchStatusConstants';\nimport { useSeriesMatchList } from './../../context/SeriesMatchListContext';\nimport MatchCard from './../MatchCard';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SeriesMatchesTab() {\n  _s();\n  const {\n    seriesId\n  } = useParams();\n  const {\n    seriesMatches,\n    loadingMatches\n  } = useSeriesMatchList();\n  const [matches, setMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  useEffect(() => {\n    const processMatches = async () => {\n      setLoading(true);\n      try {\n        const stageId = parseInt(seriesId);\n        const nextStageId = stageId + 1;\n\n        // Fetch both current and next stage metadata\n        const [stageRes, nextStageRes] = await Promise.allSettled([axios.get(`/api/stages/${stageId}`), axios.get(`/api/stages/${nextStageId}`)]);\n        const stage = stageRes.status === 'fulfilled' ? stageRes.value.data.data.data : null;\n        const nextStage = nextStageRes.status === 'fulfilled' ? nextStageRes.value.data.data.data : null;\n        let stageIds = [stageId];\n        const shouldIncludeNext = stage && nextStage && stage.league_id === nextStage.league_id && stage.season_id === nextStage.season_id && !FORMAT_CODES.includes((stage.code || '').toUpperCase());\n        if (shouldIncludeNext) {\n          stageIds.push(nextStageId);\n        }\n        const filtered = seriesMatches.filter(m => stageIds.includes(m.stage_id));\n        setMatches(filtered);\n        console.log(filtered);\n        if (filtered.length > 0) {\n          setStartDate(filtered[0].starting_at);\n          let lastDate = new Date(filtered[filtered.length - 1].starting_at);\n          let match = filtered[filtered.length - 1];\n          const matchType = (match.type || '').toUpperCase();\n          if (matchType === 'TEST' || matchType === 'TEST/5DAY') {\n            lastDate.setDate(lastDate.getDate() + 4);\n          } else if (matchType === '4DAY') {\n            lastDate.setDate(lastDate.getDate() + 3);\n          }\n          setEndDate(lastDate.toISOString());\n        }\n      } catch (err) {\n        console.error('Error processing matches from context:', err);\n        setMatches([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    processMatches();\n  }, [seriesId, seriesMatches]);\n  const formattedDate = input => {\n    if (!input) return 'N/A';\n    try {\n      return new Date(input).toLocaleDateString();\n    } catch (e) {\n      return 'Invalid date';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading && loadingMatches ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading matches...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [startDate && endDate && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Start Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 18\n          }, this), \" \", formattedDate(startDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"End Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 18\n          }, this), \" \", formattedDate(endDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"series-match-cards-row\",\n        children: matches.map(match => /*#__PURE__*/_jsxDEV(MatchCard, {\n          match: match\n        }, match.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n_s(SeriesMatchesTab, \"oWHVnHFAYYoxcpjd/9O0lSSQASo=\", false, function () {\n  return [useParams, useSeriesMatchList];\n});\n_c = SeriesMatchesTab;\nvar _c;\n$RefreshReg$(_c, \"SeriesMatchesTab\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","FORMAT_CODES","useSeriesMatchList","MatchCard","jsxDEV","_jsxDEV","Fragment","_Fragment","SeriesMatchesTab","_s","seriesId","seriesMatches","loadingMatches","matches","setMatches","loading","setLoading","startDate","setStartDate","endDate","setEndDate","processMatches","stageId","parseInt","nextStageId","stageRes","nextStageRes","Promise","allSettled","get","stage","status","value","data","nextStage","stageIds","shouldIncludeNext","league_id","season_id","includes","code","toUpperCase","push","filtered","filter","m","stage_id","console","log","length","starting_at","lastDate","Date","match","matchType","type","setDate","getDate","toISOString","err","error","formattedDate","input","toLocaleDateString","e","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","id","_c","$RefreshReg$"],"sources":["/Users/ashwin.r1/Downloads/sportmonks-api-cricket-website/frontend/src/components/series/SeriesMatchesTab.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { FORMAT_CODES } from './../../constants/matchStatusConstants';\nimport { useSeriesMatchList } from './../../context/SeriesMatchListContext';\nimport MatchCard from './../MatchCard';\n\nexport default function SeriesMatchesTab() {\n  const { seriesId } = useParams();  \n  const { seriesMatches, loadingMatches } = useSeriesMatchList();\n  const [matches, setMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n\n  useEffect(() => {\n    const processMatches = async () => {\n      setLoading(true);\n\n      try {\n        const stageId = parseInt(seriesId);\n        const nextStageId = stageId + 1;\n\n        // Fetch both current and next stage metadata\n        const [stageRes, nextStageRes] = await Promise.allSettled([\n          axios.get(`/api/stages/${stageId}`),\n          axios.get(`/api/stages/${nextStageId}`)\n        ]);\n\n        const stage = stageRes.status === 'fulfilled' ? stageRes.value.data.data.data : null;\n        const nextStage = nextStageRes.status === 'fulfilled' ? nextStageRes.value.data.data.data : null;\n\n        let stageIds = [stageId];\n\n        const shouldIncludeNext =\n          stage &&\n          nextStage &&\n          stage.league_id === nextStage.league_id &&\n          stage.season_id === nextStage.season_id &&\n          !FORMAT_CODES.includes((stage.code || '').toUpperCase());\n\n        if (shouldIncludeNext) {\n          stageIds.push(nextStageId);\n        }\n\n        const filtered = seriesMatches.filter(m => stageIds.includes(m.stage_id));\n        setMatches(filtered);\n\nconsole.log(filtered);\n\n        if (filtered.length > 0) {\n          setStartDate(filtered[0].starting_at);\n\n          let lastDate = new Date(filtered[filtered.length - 1].starting_at);\n          let match = filtered[filtered.length - 1];\n          const matchType = (match.type || '').toUpperCase();\n\n          if (matchType === 'TEST' || matchType === 'TEST/5DAY') {\n            lastDate.setDate(lastDate.getDate() + 4);\n          } else if (matchType === '4DAY') {\n            lastDate.setDate(lastDate.getDate() + 3);\n          }\n          setEndDate(lastDate.toISOString());\n        }\n      } catch (err) {\n        console.error('Error processing matches from context:', err);\n        setMatches([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    processMatches();\n  }, [seriesId, seriesMatches]);\n\n  const formattedDate = (input) => {\n    if (!input) return 'N/A';\n    try {\n      return new Date(input).toLocaleDateString();\n    } catch (e) {\n      return 'Invalid date';\n    }\n  };\n\n  return (\n    <>\n      {loading && loadingMatches ? (\n        <p>Loading matches...</p>\n      ) : (\n        <>\n          {startDate && endDate && (\n            <>\n              <p><strong>Start Date:</strong> {formattedDate(startDate)}</p>\n              <p><strong>End Date:</strong> {formattedDate(endDate)}</p>\n            </>\n          )}\n          <div className=\"series-match-cards-row\">\n            {matches.map(match => (\n              <MatchCard key={match.id} match={match} />\n            ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}