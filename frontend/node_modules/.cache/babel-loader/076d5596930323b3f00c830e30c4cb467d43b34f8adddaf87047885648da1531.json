{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin.r1/Downloads/sportmonks-api-cricket-website/frontend/src/components/series/SeriesSquadsTab.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useSeriesMatches } from '../SeriesMatchesContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SeriesSquadsTab({\n  seriesId\n}) {\n  _s();\n  const [teams, setTeams] = useState([]);\n  const {\n    matches,\n    loading: matchesLoading\n  } = useSeriesMatches();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (matchesLoading || !matches.length) return;\n    let isMounted = true;\n    const seenTeams = new Map();\n    async function fetchSquads() {\n      try {\n        for (const match of matches) {\n          const seasonId = match.season_id;\n          const teamsToFetch = [match.localteam, match.visitorteam];\n          for (const team of teamsToFetch) {\n            if (!seenTeams.has(team.id)) {\n              try {\n                const squadRes = await axios.get(`/api/teams/${team.id}/squad/${seasonId}`);\n                seenTeams.set(team.id, {\n                  ...team,\n                  squad: squadRes.data.data || []\n                });\n              } catch {\n                seenTeams.set(team.id, {\n                  ...team,\n                  squad: []\n                });\n              }\n            }\n          }\n        }\n        if (isMounted) {\n          setTeams(Array.from(seenTeams.values()));\n        }\n      } catch (err) {\n        console.error('Error loading squads', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchSquads();\n    return () => {\n      isMounted = false;\n    };\n  }, [matches, matchesLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: teams.map(team => {\n      var _team$squad$squad;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: team.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), (_team$squad$squad = team.squad.squad) === null || _team$squad$squad === void 0 ? void 0 : _team$squad$squad.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\u2013 \", player.fullname]\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))]\n      }, team.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(SeriesSquadsTab, \"S8JEX72LzCXCu++L22RfAH5pWiw=\", false, function () {\n  return [useSeriesMatches];\n});\n_c = SeriesSquadsTab;\nvar _c;\n$RefreshReg$(_c, \"SeriesSquadsTab\");","map":{"version":3,"names":["React","useEffect","useState","useSeriesMatches","axios","jsxDEV","_jsxDEV","SeriesSquadsTab","seriesId","_s","teams","setTeams","matches","loading","matchesLoading","setLoading","length","isMounted","seenTeams","Map","fetchSquads","match","seasonId","season_id","teamsToFetch","localteam","visitorteam","team","has","id","squadRes","get","set","squad","data","Array","from","values","err","console","error","children","map","_team$squad$squad","style","marginBottom","name","fileName","_jsxFileName","lineNumber","columnNumber","player","fullname","_c","$RefreshReg$"],"sources":["/Users/ashwin.r1/Downloads/sportmonks-api-cricket-website/frontend/src/components/series/SeriesSquadsTab.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSeriesMatches } from '../SeriesMatchesContext';\nimport axios from 'axios';\n\nexport default function SeriesSquadsTab({ seriesId }) {\n  const [teams, setTeams] = useState([]);\n  const { matches, loading: matchesLoading } = useSeriesMatches();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (matchesLoading || !matches.length) return;\n\n    let isMounted = true;\n    const seenTeams = new Map();\n\n    async function fetchSquads() {\n      try {\n        for (const match of matches) {\n          const seasonId = match.season_id;\n          const teamsToFetch = [match.localteam, match.visitorteam];\n\n          for (const team of teamsToFetch) {\n            if (!seenTeams.has(team.id)) {\n              try {\n                const squadRes = await axios.get(`/api/teams/${team.id}/squad/${seasonId}`);\n                seenTeams.set(team.id, {\n                  ...team,\n                  squad: squadRes.data.data || [],\n                });\n              } catch {\n                seenTeams.set(team.id, {\n                  ...team,\n                  squad: [],\n                });\n              }\n            }\n          }\n        }\n        if (isMounted) {\n          setTeams(Array.from(seenTeams.values()));\n        }\n      } catch (err) {\n        console.error('Error loading squads', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchSquads();\n    return () => { isMounted = false; };\n  }, [matches, matchesLoading]);\n\n  return (\n    <div>\n      {teams.map((team) => (\n        <div key={team.id} style={{ marginBottom: '20px' }}>\n          <h4>{team.name}</h4>\n          {team.squad.squad?.map((player) => (\n            <div key={player.id}>â€“ {player.fullname}</div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}